"""
Django settings for news_scraper project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-yni=o@3fwlh+9@dghw**u0+95^#6!#ki12+gxqlr#2yu3evyfv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get('DEBUG', 0))

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', [])
if ALLOWED_HOSTS:
    ALLOWED_HOSTS = [str(x) for x in ALLOWED_HOSTS.split(',')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_celery_beat",
    "news_scraper.api",
    "rest_framework",
    "django_createsuperuserwithpassword",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'news_scraper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news_scraper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': os.environ.get('POSTGRES_USER', 'root'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': int(os.environ.get('POSTGRES_PORT', 5432))
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'data'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = ['127.0.0.1']

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': int(os.environ.get('PAGE_SIZE', 10)),
    'PAGE_SIZE_QUERY_PARAM': os.environ.get('PAGE_SIZE_QUERY_PARAM', 'limit'),
    'MAX_PAGE_SIZE': int(os.environ.get('MAX_PAGE_SIZE', 100))
}

SCRAPING_URL = os.environ.get('SCRAPING_URL')
DEFAULT_SYMBOL_TYPES = "AAPL,TWTR,GC=F(GOLD),INTC"
SYMBOL_TYPES = [str(_sym) for _sym in os.environ.get('SYMBOL_TYPES', DEFAULT_SYMBOL_TYPES).split(',')]
DEFAULT_QUERY_PARAMS = {"region": "US", "lang": "en-US"}

from celery.schedules import crontab

import news_scraper.tasks

JOB_TIME = os.environ.get('JOB_DEFAULT_PERIODIC_TIME')
time_range = JOB_TIME[-1]
time = int(JOB_TIME[:-1])

scheduler = None

if time_range == "m":
    scheduler = crontab(minute=time)
elif time_range == "h":
    scheduler = crontab(hour=time)
elif time_range == "y":
    scheduler = crontab(month_of_year=time)
elif time_range == "d":
    scheduler = crontab(day_of_week=time)
else:
    scheduler = crontab(day_of_month=time)


CELERY_BEAT_SCHEDULE = {
    "collect_data": {
        "task": "news_scraper.tasks.collect_data",
        "schedule": scheduler,
    },
}
